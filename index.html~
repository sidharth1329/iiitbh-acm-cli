<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    
    <head>
        <title>IIIT Bhubaneswar's ACM Student Chapter</title>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link rel="shortcut icon" type="image/x-icon" href="favicon.ico" />
        <style type="text/css">
            html {
                height: 100%;
            }
            body {
                background: #fff;
                font-size: 12px;
                font-family: monospace;
                height: 100%;
                margin:0px;
                padding: 0px;
            }
            form {
                padding: 0px;
                margin: 0px;
            }
            pre {
                font-size: 12px;
            }
            br {
                clear: both;
            }
            :focus {
                outline: 0;
            }
            input.cmdline {
                border: none;
                border: 0px;
                font-size: 12px;
                font-family: monospace;
                padding: 0px;
                margin:0px;
                width:100%;
            }
            table.inputtable {
                width:100%;
                vertical-align:top;
            }
            td.inputtd {
                width:100%;
            }
            #input {
                margin-left: 8px;'''
                color: #666;
                overflow: hidden;
            }
            #output {
                margin-left: 8px;
                margin-top: 8px;
            }
            .less {
                color: black;
            }
            table {
                padding: 0px;
                margin: 0px;
                border-collapse: collapse;
                border-spacing: 0px;
            }
            td {
                padding: 0px;
                margin: 0px;
                vertical-align: top;
                font-size: 12px;
                font-family: monospace;
            }
            .help td {
                padding-right: 25px;
                font-size: 12px;
            }
            div#prompt {
                display: inline;
                white-space:nowrap;
                padding:0px;
                margin:0px;
            }
            img {
                border: none;
            }
        </style>
        <script type="text/javascript">
            var goosh = new Object();
            goosh.lib = new Object();
            goosh.lib.namespace = function (C) {
                var D = C.split(".");
                var A = window;
                for (var B = 0; B < D.length; B++) {
                    if (typeof A[D[B]] == "undefined") {
                        A[D[B]] = new Object()
                    }
                    A = A[D[B]]
                }
            };
            goosh.lib.in_array = function (A, C) {
                var B;
                for (B = 0; B < A.length; B++) {
                    if (A[B] == C) {
                        return true
                    }
                }
                return false
            };
            goosh.lib.chop = function (A) {
                if (A) {
                    while (A.charAt(0) == " ") {
                        A = A.substr(1)
                    }
                }
                return A
            };
            goosh.lib.namespace("goosh.lib");
            goosh.lib.get = function (A) {
                A = A.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
                var C = "[\\?&]" + A + "=([^&#]*)";
                var D = new RegExp(C);
                var B = D.exec(window.location.href);
                if (B == null) {
                    return ""
                } else {
                    return decodeURIComponent(B[1]).replace(/\+/g, " ")
                }
            };
            goosh.lib.namespace("goosh.lib.cookie");
            goosh.lib.cookie.list = new Object();
            goosh.lib.cookie.getfromstr = function (G, D) {
                var A = G.split(";");
                for (var C = 0; C < A.length; C++) {
                    var F = A[C].split("=");
                    var B = goosh.lib.chop(F[0]);
                    var E = goosh.lib.chop(F[1]);
                    if (D && goosh.lib.cookie.list[B] != E) {
                        goosh.lib.cookie.set(B, E, 365)
                    }
                    goosh.lib.cookie.list[B] = E
                }
            };
            goosh.lib.cookie.get = function (A) {
                return goosh.lib.cookie.list[A]
            };
            goosh.lib.cookie.set = function (B, D, F) {
                var E = new Date();
                var C = E.getTime() + (F * 24 * 60 * 60 * 1000);
                E.setTime(C);
                document.cookie = B + "=" + D + "; expires=" + E.toGMTString();
                if (goosh.config.user != "guest" && B != "loggedin") {
                    var A = "";
                    if (F < 0) {
                        A = "&del=1"
                    }
                    goosh.ajax.query("http://goosh.appspot.com/cookie?key=" + encodeURIComponent(B) + "&val=" + encodeURIComponent(D) + "&callback=goosh.lib.cookie.fetch" + A, true)
                }
                goosh.lib.cookie.list[B] = D;
                return D
            };
            goosh.lib.cookie.del = function (A) {
                goosh.lib.cookie.set(A, "", -100);
                goosh.lib.cookie.list[A] = null
            };
            goosh.lib.cookie.getall = function () {
                return goosh.lib.cookie.list
            };
            goosh.lib.namespace("goosh.lang");
            goosh.lang.list = {
                arabic: "ar",
                bulgarian: "bg",
                catalan: "ca",
                chinese: "zh",
                chinese_simplified: "zh-cn",
                chinese_traditional: "zh-tw",
                croatian: "hr",
                czech: "cs",
                danish: "da",
                dutch: "nl",
                english: "en",
                estonian: "et",
                filipino: "tl",
                finnish: "fi",
                french: "fr",
                german: "de",
                greek: "el",
                hebrew: "iw",
                hindi: "hi",
                hungarian: "hu",
                indonesian: "id",
                italian: "it",
                japanese: "ja",
                korean: "ko",
                latvian: "lv",
                lithuanian: "lt",
                norwegian: "no",
                persian: "fa",
                polish: "pl",
                portuguese: "pt",
                romanian: "ro",
                russian: "ru",
                serbian: "sr",
                slovak: "sk",
                slovenian: "sl",
                spanish: "es",
                swedish: "sv",
                thai: "th",
                turkish: "tr",
                ukrainian: "uk",
                vietnamese: "vi"
            };
            goosh.lang.reverse = new Object();
            for (key in goosh.lang.list) {
                goosh.lang.reverse[goosh.lang.list[key]] = key
            }
            goosh.lib.namespace("goosh.gui");
            goosh.gui.inputel = false;
            goosh.gui.outputel = false;
            goosh.gui.promptel = false;
            goosh.gui.inputfield = false;
            goosh.gui.bodyel = false;
            goosh.gui.el = function (A) {
                return document.getElementById(A)
            };
            goosh.gui.init = function () {
                goosh.gui.inputel = document.getElementById("input");
                goosh.gui.outputel = document.getElementById("output");
                goosh.gui.promptel = document.getElementById("prompt");
                goosh.gui.inputfield = document.getElementById("inputfield");
                goosh.gui.bodyel = document.getElementById("body");
                if (goosh.gui.inputfield.createTextRange) {
                    goosh.gui.inputfield.onkeyup = new Function("return goosh.keyboard.mcursor(event);");
                    goosh.gui.bodyel.onfocus = new Function("return goosh.gui.focusinput(event);");
                    goosh.gui.bodyel.onclick = new Function("return goosh.gui.focusinput(event);");
                    goosh.gui.bodyel.onkeydown = new Function("return goosh.keyboard.keyDownHandler(event);")
                } else {
                    goosh.gui.inputfield.onkeyup = goosh.keyboard.mcursor;
                    goosh.gui.bodyel.onfocus = goosh.gui.focusinput;
                    goosh.gui.bodyel.onclick = goosh.gui.focusinput;
                    goosh.gui.bodyel.onkeydown = goosh.keyboard.keyDownHandler
                }
            };
            goosh.gui.error = function (A) {
                goosh.ajax.stopall();
                goosh.gui.out("Error: " + A + "<br/> <br/>");
                goosh.gui.showinput();
                goosh.gui.focusinput();
                goosh.gui.scroll()
            };
            goosh.gui.outln = function (A) {
                goosh.gui.out(A + "<br/>")
            };
            goosh.gui.out = function (A) {
                var B = document.createElement("div");
                B.innerHTML = A;
                goosh.gui.outputel.appendChild(B)
            };
            goosh.gui.less = function (A) {
                return "<span class='less'>" + A + "</span>"
            };
            goosh.gui.info = function (A) {
                return "<span class='info'>" + A + "</span>"
            };
            goosh.gui.clear = function () {
                goosh.gui.outputel.innerHTML = ""
            };
            goosh.gui.showinput = function () {
                goosh.gui.inputel.style.display = "block"
            };
            goosh.gui.hideinput = function () {
                goosh.gui.inputel.style.display = "none"
            };
            goosh.gui.focusinput = function () {
                var A = "";
                if (document.selection) {
                    A = document.selection.createRange().text
                } else {
                    if (window.getSelection) {
                        A = window.getSelection().toString()
                    }
                }
                if (A.length == 0) {
                    document.f.q.value = document.f.q.value;
                    if (goosh.gui.inputel.style.display != "none") {
                        document.f.q.focus()
                    }
                }
            };
            goosh.gui.updateprompt = function () {
                goosh.gui.prompt = goosh.config.user + "@" + goosh.config.host + ":80/" + goosh.config.mode + goosh.config.pend;
                goosh.gui.promptel.innerHTML = goosh.gui.prompt
            };
            goosh.gui.scroll = function () {
                window.scrollBy(0, 122500)
            };
            goosh.gui.setstyle = function (B, E, D) {
                try {
                    var A = goosh.gui.el(B);
                    A.style[E] = D;
                    return true
                } catch (C) {
                    return false
                }
            };
            goosh.gui.setstyleclass = function (D, B) {
                var C = document.createElement("div");
                var A = "<br style='line-height:0px;'/><style>" + D + " {" + B + "}</style>";
                C.innerHTML = A;
                goosh.gui.bodyel.appendChild(C)
            };
            goosh.lib.namespace("goosh.set");
            goosh.set.base = function (name, def, txt, min, max) {
                this.name = name;
                this.txt = txt;
                this.def = def;
                (max) ? this.max = max : this.max = 2000;
                (min) ? this.min = min : this.min = 0;
                if (min && max) {
                    this.txt += " (" + min + ".." + max + ")"
                }
                this.get = function () {
                    return eval("" + this.name + ";")
                };
                this.set = function (val) {
                    if (val >= this.min && val <= this.max) {
                        eval("" + this.name + " = '" + val + "';")
                    }
                    return true
                }
            };
            goosh.set.list = new Object();
            goosh.set.list.lang = new goosh.set.base("goosh.config.lang", "en", "google default language");
            goosh.set.list.lang.set = function (A) {
                if (goosh.lang.reverse[A]) {
                    goosh.config.lang = A
                } else {
                    if (goosh.lang.list[A]) {
                        goosh.config.lang = goosh.lang.list[A]
                    } else {
                        return false
                    }
                }
                return true
            };
            goosh.set.list.results = new goosh.set.base("goosh.config.numres", "4", "number of results for google-searches", 1, 100);
            goosh.set.list.timeout = new goosh.set.base("goosh.config.timeout", "4", "timeout for ajax requests in seconds", 1, 100);
            goosh.set.list["style.bg"] = new goosh.set.base("goosh.config.bgcolor", "#000000", "goosh background color");
            goosh.set.list["style.bg"].set = function (A) {
                if (goosh.gui.setstyle("body", "backgroundColor", A) && goosh.gui.setstyle("inputfield", "backgroundColor", A)) {
                    goosh.config.bgcolor = A;
                    return true
                } else {
                    return false
                }
            };
            goosh.set.list["style.fg"] = new goosh.set.base("goosh.config.fgcolor", "#ffffff", "goosh font color");
            goosh.set.list["style.fg"].set = function (A) {
                if (goosh.gui.setstyle("body", "color", A) && goosh.gui.setstyle("inputfield", "color", A)) {
                    goosh.config.fgcolor = A;
                    return true
                } else {
                    return false
                }
            };
            goosh.set.list["style.hl"] = new goosh.set.base("goosh.config.hlcolor", "#009900", "goosh highlight color");
            goosh.set.list["style.hl"].set = function (A) {
                goosh.gui.setstyleclass(".info", "color: " + A);
                goosh.gui.setstyleclass("a:visited.info", "color: " + A);
                goosh.config.hlcolor = A;
                return true
            };
            goosh.set.list["style.sh"] = new goosh.set.base("goosh.config.shcolor", "#ffffff", "goosh 'shaded' color");
            goosh.set.list["style.sh"].set = function (A) {
                goosh.gui.setstyleclass(".less", "color: " + A);
                goosh.config.shcolor = A;
                return true
            };
            goosh.set.list["style.link"] = new goosh.set.base("goosh.config.linkcolor", "#ffffff", "goosh link color");
            goosh.set.list["style.link"].set = function (A) {
                goosh.gui.setstyleclass("a", "color: " + A);
                goosh.config.linkcolor = A;
                return true
            };
            goosh.set.list["style.vlink"] = new goosh.set.base("goosh.config.vlinkcolor", "#ffffff", "goosh visited link color");
            goosh.set.list["style.vlink"].set = function (A) {
                goosh.gui.setstyleclass("a:visited", "color: " + A);
                goosh.config.vlinkcolor = A;
                return true
            };
            goosh.set.list["place.width"] = new goosh.set.base("goosh.config.mapwidth", "300", "width of map image", 20, 600);
            goosh.set.list["place.height"] = new goosh.set.base("goosh.config.mapheight", "150", "height of map image", 20, 500);
            goosh.set.init = function (A, C) {
                if (goosh.config.user != "guest") {
                    if (!A) {
                        goosh.ajax.query("http://goosh.appspot.com/cookie?callback=goosh.set.init");
                        return
                    } else {
                        if (goosh.ajax.iscontext(A)) {
                            goosh.gui.outln("Loading remote settings...");
                            goosh.lib.cookie.getfromstr(document.cookie);
                            goosh.lib.cookie.getfromstr(C, true)
                        }
                    }
                } else {
                    goosh.gui.outln("Loading local settings...");
                    goosh.lib.cookie.getfromstr(document.cookie)
                }
                var B = goosh.lib.cookie.getall();
                for (key in goosh.set.list) {
                    var D = false;
                    if (B[key]) {
                        D = B[key]
                    }
                    if (D && goosh.set.list[key].set(D)) {
                        goosh.gui.outln("&nbsp;" + key + " => &quot;" + D + "&quot;.")
                    } else {
                        goosh.set.list[key].set(goosh.set.list[key].def)
                    }
                }
                goosh.gui.outln("");
                goosh.getquery()
            };
            goosh.lib.namespace("goosh.ajax");
            goosh.ajax.contexts = new Array();
            goosh.ajax.lastcontext = false;
            goosh.ajax.stopall = function () {
                for (key in goosh.ajax.contexts) {
                    goosh.ajax.iscontext(key)
                }
            };
            goosh.ajax.deletecontext = function (A) {
                goosh.gui.outln("Error: Operation timed out. " + A);
                if (!document.all) {
                    goosh.gui.outln(goosh.gui.less('If you use the noscript firefox-extension, add "ajax.googleapis.com" to the whitelist.'))
                }
                goosh.gui.outln("");
                goosh.ajax.contexts[A] = false;
                var B = document.getElementById(A);
                if (B) {
                    document.body.removeChild(B)
                }
                goosh.gui.showinput();
                goosh.gui.focusinput();
                goosh.gui.scroll();
                if (!document.all) {
                    stop()
                }
            };
            goosh.ajax.iscontext = function (A) {
                if (goosh.ajax.contexts[A]) {
                    clearTimeout(goosh.ajax.contexts[A]);
                    goosh.ajax.contexts[A] = false;
                    var B = document.getElementById(A);
                    if (B) {
                        document.body.removeChild(B)
                    }
                    return true
                } else {
                    return false
                }
            };
            goosh.ajax.getcontext = function (A) {
                var C = new Date();
                var B = C.getTime();
                if (A) {
                    B = A
                }
                goosh.ajax.contexts[B] = setTimeout("goosh.ajax.deletecontext('" + B + "');", 1000 * goosh.config.timeout);
                return B
            };
            goosh.ajax.query = function (A, D) {
                var B = "none";
                if (!D) {
                    B = goosh.ajax.getcontext();
                    goosh.ajax.lastcontext = B;
                    goosh.gui.hideinput()
                }
                var C = document.createElement("script");
                document.body.appendChild(C);
                C.src = A + "&context=" + B + "&";
                C.id = B
            };
            goosh.lib.namespace("goosh.config");
            goosh.config.apikey = "ABQIAAAA0cXSEVCNSwf_x74KTtPJMRQP4Q7D8MPck7bhT7upyfJTzVDU2BRxkUdd2AvzlDDF7DNUJI_Y4eB6Ug";
            goosh.config.user = "user";
            goosh.config.host = "iiitbh-acm.org";
            goosh.config.mode = "";
            goosh.config.pend = "$&nbsp;";
            goosh.config.numres = 4;
            goosh.config.timeout = 4;
            goosh.config.start = 0;
            goosh.config.moreobj;
            goosh.config.lang = "en";
            goosh.config.urls = new Array();
            goosh.config.cmdlines = new Array();
            goosh.config.cmdqueue = new Array();
            goosh.lib.namespace("goosh.keyboard");
            goosh.keyboard.suggestions = new Array();
            goosh.keyboard.suggpos = 1;
            goosh.keyboard.suggword = "";
            goosh.keyboard.hist = new Array();
            goosh.keyboard.histpos = 0;
            goosh.keyboard.histtemp = 0;
            goosh.keyboard.suggest = function (B) {
                if (goosh.keyboard.suggpos > goosh.keyboard.suggestions[B].length) {
                    goosh.keyboard.suggpos = 1
                }
                if (goosh.keyboard.suggestions[B][goosh.keyboard.suggpos]) {
                    goosh.gui.inputfield.value = goosh.keyboard.suggestions[B][goosh.keyboard.suggpos]
                }
                var C = goosh.gui.inputfield;
                if (C.createTextRange) {
                    var A = C.createTextRange();
                    A.moveStart("character", B.length);
                    A.select()
                } else {
                    if (C.setSelectionRange) {
                        C.setSelectionRange(B.length, C.value.length)
                    }
                }
            };
            goosh.keyboard.dummyac = function () {
                this.Suggest_apply = function (C, D, A, B) {
                    goosh.keyboard.suggestions[D] = A;
                    goosh.keyboard.suggest(D);
                    return true
                }
            };
            window.google = new Array();
            window.google.ac = new goosh.keyboard.dummyac();
            goosh.keyboard.keyDownHandler = function (B) {
                if (!B && window.event) {
                    B = window.event
                }
                if (B) {
                    _lastKeyCode = B.keyCode
                }
                if (B && B.keyCode == 9) {
                    B.cancelBubble = true;
                    B.returnValue = false;
                    var C = goosh.keyboard.suggword;
                    if (C != "") {
                        if (!goosh.keyboard.suggestions[C]) {
                            goosh.keyboard.suggpos = 1;
                            var A = document.createElement("script");
                            document.body.appendChild(A);
                            A.src = "http://www.google.com/complete/search?hl=" + goosh.config.lang + "&js=true&qu=" + encodeURIComponent(C)
                        } else {
                            goosh.keyboard.suggpos += 2;
                            goosh.keyboard.suggest(C)
                        }
                    }
                    return false
                }
            };
            goosh.keyboard.mcursor = function (B) {
                var A = B.keyCode;
                if (goosh.keyboard.hist.length > 0) {
                    if (A == 38 || A == 40) {
                        if (goosh.keyboard.hist[goosh.keyboard.histpos]) {
                            goosh.keyboard.hist[goosh.keyboard.histpos] = goosh.gui.inputfield.value
                        } else {
                            goosh.keyboard.histtemp = goosh.gui.inputfield.value
                        }
                    }
                    if (A == 38) {
                        goosh.keyboard.histpos--;
                        if (goosh.keyboard.histpos < 0) {
                            goosh.keyboard.histpos = 0
                        }
                    } else {
                        if (A == 40) {
                            goosh.keyboard.histpos++;
                            if (goosh.keyboard.histpos > goosh.keyboard.hist.length) {
                                goosh.keyboard.histpos = goosh.keyboard.hist.length
                            }
                        }
                    }
                    if (A == 38 || A == 40) {
                        if (goosh.keyboard.hist[goosh.keyboard.histpos]) {
                            goosh.gui.inputfield.value = goosh.keyboard.hist[goosh.keyboard.histpos]
                        } else {
                            goosh.gui.inputfield.value = goosh.keyboard.histtemp
                        }
                    }
                }
                if (A != 9 && A != 13) {
                    goosh.keyboard.suggword = goosh.gui.inputfield.value
                }
                if (A == 13) {
                    goosh.command()
                }
            };
            goosh.lib.namespace("goosh.modules");
            goosh.lib.namespace("goosh.module");
            goosh.lib.namespace("goosh.modobj");
            goosh.modules.list = new Array();
            goosh.module.base = function () {
                this.mode = false;
                this.parameters = "";
                this.help = "no helptext yet.";
                this.helptext = "";
                this.hasmore = false;
                this.results = new Array()
            };
            goosh.modules.register = function (name, base) {
                if (!base) {
                    base = "base"
                }
                eval("goosh.module." + name + ".prototype = new goosh.module." + base + ";goosh.modobj." + name + " = new goosh.module." + name + ';goosh.modules.list["' + name + '"] = goosh.modobj.' + name + ";")
            };
            goosh.module.clear = function () {
                this.name = "clear";
                this.aliases = new Array("clear", "c");
                this.help = "clear the screen";
                this.call = function (A) {
                    goosh.gui.clear()
                }
            };
            goosh.modules.register("clear");

		goosh.module.forum = function () {
                this.name = "forum";
                this.aliases = new Array("forum");
                this.mode = true;
                this.help = "A forum containing discussion topics as text files";
                this.helptext = "<span class='info'>examples:</span><br/><i>cd forum</i>  - Changes the directory to forum, where you can use 'ls' to list all the discussion topics.<br/>"
            };
            goosh.modules.register("forum");

            goosh.module.help = function () {
                this.name = "help";
                this.aliases = new Array("help", "man", "h", "?");
                this.help = "displays help text";
                this.helptext = "";
                this.parameters = "[command]";
                this.call = function (C) {
                    if (C[0] == "goosh") {
                        C[0] = false
                    }
                    var B = "<span class='info'>help";
                    if (C[0]) {
                        B += ": " + C[0]
                    }
                    B += "</span><br/> <br/>";
                    if (C[0] && !goosh.modules.list[C[0]]) {
                        goosh.gui.error("command &quot;" + C[0] + "&quot; not found.");
                        return false
                    }
                    B += "<table border='0' class='help'>";
                    B += "<tr><td class='less'>command</td><td class='less'>aliases</td><td class='less'>parameters</td><td class='less'>function</td></tr>";
                    var A;
                    for (key in goosh.modules.list) {
                        if (!C[0] || key == C[0]) {
                            A = goosh.modules.list[key];
                            B += "<tr><td";
                            if (A.mode) {
                                B += " class='info'"
                            }
                            B += ">";
                            B += "" + A.name + "</td><td>";
                            if (A.aliases.length > 1) {
                                B += "(";
                                for (i = 0; i < A.aliases.length; i++) {
                                    if (A.aliases[i] != A.name) {
                                        B += A.aliases[i];
                                        B += ","
                                    }
                                }
                                B = B.substr(0, B.length - 1);
                                B += ")"
                            }
                            B += "</td><td>";
                            if (A.parameters) {
                                B += A.parameters
                            }
                            B += "</td><td>";
                            B += "" + A.help + "\n";
                            B += "</td></tr>"
                        }
                    }
                    B += "</table>";
                    if (C[0]) {
                        B += " <br/>";
                        B += A.helptext;
                        B += " <br/>"
                    } else {
                        B += " <br/>";
                        B += "- Enter green commands without parameters to change default mode.<br/>";
                        B += "- Anything that's not a command will search in current default mode.<br/>";
                        B += "- Aliases will expand to commands. Numbers will expand to corresponding search results.<br/>";
                        B += "- Use cursor up and down for command history.<br/>";
                        B += "- Enter keyword and hit the tab-key for tab-completion.<br/>";
                        B += "- Commands marked with * are experimental, use them with care and please report any bugs.<br/>";
                        B += "<br/>"
                    }
                    goosh.gui.outln(B)
                }
            };
            goosh.modules.register("help");
            goosh.module.cd = function () {
                this.name = "cd";
                this.aliases = new Array("cd");
                this.parameters = "&lt;command>";
                this.help = "change mode";
                this.helptext = "This exists just for convenience. Use &lt;command> without parameters instead.<br/>";
                this.call = function (A) {
                    if (!A[0]) {
                        A[0] = goosh.config.mode;
                    }
                    if (A[0] && A[0] == "..") {
                        goosh.config.mode = "";
			goosh.gui.updateprompt();
			return;
                    }
                    if (A[0] && goosh.modules.list[A[0]] && goosh.modules.list[A[0]].mode) {
                        var B = goosh.modules.list[A[0]];
                        goosh.config.mode = B.name;
                        goosh.gui.updateprompt();
                    } else {
                        goosh.gui.error("command not found or command is not a mode.")
                    }
                }
            };
            goosh.modules.register("cd");

 		goosh.module.startx = function () {
                this.name = "startx";
                this.aliases = new Array("startx", "x");
                this.parameters = "[command]";
                this.help = "Open X Windows System";
                this.call = function (args) {
			window.location.href = "./visual.html";
		}
            };
            goosh.modules.register("startx");

            goosh.module.ls = function () {
                this.name = "ls";
                this.aliases = new Array("ls");
                this.help = "lists commands";
                this.helptext = "this exists just for convenience. Use <span class='info'>help</span> for help.<br/>";
                this.parameters = "[command]";
                this.call = function (C) {
                    var B = "";
                    if (C[0] && !goosh.modules.list[C[0]]) {
                        goosh.gui.error("command &quot;" + C[0] + "&quot; not found.");
                        return false
                    }
                    B += "<table border='0' class='help'><tr>";
                    var A;
                    var D = 0;
		    if(goosh.config.mode == "forum"){
		    B+="<td>topic1.txt</td>\
			<td>topic2.txt</td>\
			<td>topic3.txt</td>\
			<td>topic4.txt</td>\
			<td>topic5.txt</td></tr>\
			<tr><td>topic6.txt</td>\
			<td>topic7.txt</td>\
			<td>topic8.txt</td>\
			<td>topic9.txt</td>\
			<td>topic10.txt</td></tr>\
			<td>topic11.txt</td>";
		    }
		    else{
                    for (key in goosh.modules.list) {
                        if (C.length == 0 || key == C[0]) {
                            A = goosh.modules.list[key];
                            B += "<td";
                            if (A.mode) {
                                B += " class='info'"
                            }
                            B += ">" + A.name + "</td><td>";
                            if (D == 5) {
                                D = 0;
                                B += "</tr><tr>"
                            }
                            D++
                        }
                    }}
                    B += "</tr></table>";
                    goosh.gui.outln(B)
                }
            };
            goosh.modules.register("ls");

            goosh.module.load = function () {
                this.name = "load";
                this.aliases = new Array("load");
                this.help = "load an extension";
                this.parameters = "&lt;extension_url>";
                this.call = function (B) {
                    if (B[0]) {
                        var A = B[0];
                        if (A.indexOf("http://") == -1 && A.indexOf("https://")) {
                            A = "http://goosh.org/ext/" + A + ".js"
                        }
                        var C = document.createElement("script");
                        document.body.appendChild(C);
                        C.src = A
                    }
                }
            };
            goosh.modules.register("load");
            goosh.module.calculate = function () {
                this.name = "calculate";
                this.aliases = new Array("calculate", "calc");
                this.help = "evaluate a mathematical expression";
                this.parameters = "[mathematical expression]";
                this.call = function (args) {
                    var out = "";
                    var exp = args.join(" ");
                    var expin = exp;
                    if (exp.match(/^[0-9\+\-\/\*\. \^\(\)]+$/)) {
                        exp = exp.replace(/([0-9]+)\^([0-9]+)/g, "Math.pow($1,$2)");
                        goosh.gui.outln(expin + " = " + eval(exp))
                    } else {
                        goosh.gui.error("could not calculate that.");
                        return false
                    }
                }
            };
            goosh.modules.register("calculate");
            goosh.module.settings = function () {
                this.name = "settings";
                this.aliases = new Array("settings", "set");
                this.help = "edit settings";
                this.parameters = "[name] [value]";
                this.helptext = "<span class='info'>examples:</span><br/><i>set lang de</i>  - sets language to german<br/><i>set lang</i>  - displays value of lang-setting<br/><i>settings</i>  - displays all settings<br/><i>settings reset</i>  - reset all settings to default values<br/>";
                this.call = function (B) {
                    var A = "";
                    if (B[0] && B[1]) {
                        if (goosh.set.list[B[0]] && goosh.set.list[B[0]].set(B[1])) {
                            if (goosh.set.list[B[0]].get() == goosh.set.list[B[0]].def) {
                                goosh.lib.cookie.del(B[0])
                            } else {
                                goosh.lib.cookie.set(B[0], goosh.set.list[B[0]].get(), 365)
                            }
                            B[1] = false
                        } else {
                            goosh.gui.error("Could not set " + B[0] + " to &quot;" + B[1] + "&quot;");
                            return false
                        }
                    }
                    if (B[0] && !B[1]) {
                        if (B[0] == "reset") {
                            for (key in goosh.set.list) {
                                goosh.set.list[key].set(goosh.set.list[key].def);
                                goosh.lib.cookie.del(key)
                            }
                            A += "Settings where set to default values."
                        } else {
                            if (goosh.set.list[B[0]]) {
                                A += B[0] + " is set to &quot;" + goosh.set.list[B[0]].get() + "&quot;.<br>"
                            } else {
                                goosh.gui.error("No setting with that name.")
                            }
                        }
                    } else {
                        A += "<table border='0' class='help'><tr>";
                        A += "<tr><td class='less'>name</td><td class='less'>value</td><td class='less'>default</td><td class='less'>help</td></tr>";
                        for (key in goosh.set.list) {
                            A += "<td";
                            A += " class='info'";
                            A += ">" + key + "</td>";
                            A += "<td>" + goosh.set.list[key].get() + "</td>";
                            A += "<td class='less'>" + goosh.set.list[key].def + "</td>";
                            A += "<td class='less'>" + goosh.set.list[key].txt + "</td>";
                            A += "</tr><tr>"
                        }
                        A += "</tr></table>"
                    }
                    goosh.gui.outln(A)
                }
            };
            goosh.modules.register("settings");

            goosh.command = function () {
                var F = goosh.gui.inputfield.value;
                var G = F.split(" ");
                var C = new Array();
                for (i = 0; i < G.length; i++) {
                    if (G[i] != "") {
                        if (G[0] != "set" && G[0] != "settings") {
                            var B = 1;
                            while (goosh.config.urls[B]) {
                                if (G[i] == B) {
                                    G[i] = goosh.config.urls[B];
                                    if (i == 0) {
                                        C.push("open")
                                    }
                                }
                                B++
                            }
                        }
                        C.push(G[i])
                    }
                }
                var E;
                for (key in goosh.modules.list) {
                    if (goosh.lib.in_array(goosh.modules.list[key].aliases, C[0])) {
                        E = goosh.modules.list[key];
                        C[0] = E.name;
                        break
                    }
                }
                if (C.length == 0 && goosh.config.moreobj && goosh.config.moreobj.hasmore) {
                    E = goosh.modules.list.more;
                    C[0] = "more"
                }
                var A = C.join(" ");
                if (encodeURIComponent(A) != goosh.lib.get("q") && A != "more" && A != "logout") {
                    window.location.hash = "#" + encodeURIComponent(A)
                }
                goosh.gui.out("<div class='input'><span class='less'>" + goosh.gui.prompt + "</span>" + A.replace(/</g, "&lt;") + "</div>");
                if (A != "") {
                    goosh.keyboard.hist[goosh.keyboard.hist.length] = A;
                    goosh.keyboard.histpos = goosh.keyboard.hist.length
                }
                var D = "";
                if (!E) {
                    E = goosh.modules.list[goosh.config.mode]
                } else {
                    for (i = 0; i < C.length - 1; i++) {
                        C[i] = C[i + 1]
                    }
                    C.pop()
                }
                if (E.more && C.length > 0) {
                    this.config.moreobj = E
                }
                if (C.length == 0 && E.mode) {
                    goosh.config.mode = E.name;
                    goosh.gui.updateprompt()
                } else {
                    E.call(C)
                }
                goosh.gui.scroll();
                goosh.gui.inputfield.value = "";
                goosh.gui.focusinput();
                return false
            };
            goosh.onload = function (E, D) {
                var A = false;
                try {
                    if (parent.goosh != goosh) {
                        var B = document.getElementById("body");
                        B.innerHTML = "";
                        goosh = parent.goosh;
                        A = true
                    }
                } catch (E) {}
                goosh.gui.init();
                if (!D && (A || document.cookie.indexOf("loggedin") != -1)) {
                    goosh.ajax.query("http://goosh.appspot.com/status?callback=goosh.onload");
                    return
                } else {
                    if (goosh.ajax.iscontext(E)) {
                        goosh.config.user = D;
                        var F = goosh.gui.el("gooshlogin");
                        var C = goosh.gui.el("gooshloginparent");
                        if (F && C) {
                            goosh.gui.outputel.removeChild(goosh.gui.outputel.lastChild)
                        }
                    }
                }
                if (D && D != "guest") {
                    goosh.lib.cookie.set("loggedin", "1", 365)
                }
                goosh.set.init()
            };
            goosh.getquery = function () {
                var A = "";
                if (goosh.lib.get("q")) {
                    A = goosh.lib.get("q")
                }
                if (window.location.hash) {
                    A = decodeURIComponent(window.location.hash.substr(1))
                }
                A += " ";
                if (A != " " && A.substr(0, 6) != "login " && A.substr(0, 4) != "set " && A.substr(0, 9) != "settings ") {
                    goosh.gui.inputfield.value = A.substr(0, A.length)
                } else {
                    goosh.gui.inputfield.value = ""
                }
                goosh.gui.updateprompt();
                goosh.gui.showinput();
                goosh.gui.focusinput();
                if (goosh.gui.inputfield.value != "") {
                    goosh.command()
                }
            };
            if (typeof window.addEventListener !== "undefined") {
                window.addEventListener("load", goosh.onload, false)
            } else {
                if (typeof window.attachEvent !== "undefined") {
                    window.attachEvent("onload", goosh.onload)
                }
            };
        </script>
    </head>
    
    <body id="body">
        <div id="output">
	<p>http://www.iitbh-acm.org/  0.1.1-beta  <script language="javascript">
today = new Date(); 
document.write(today.getHours(),":",today.getMinutes()," "); 
document.write(today.getDate(),"/",today.getMonth()+1,"/",today.getFullYear());</script></p>
<p>Welcome to IIIT Bhubaneswar's ACM Student Chapter</p>
<p>This interface behaves similar to a UNIX Shell. At our ACM Student Chapter, we try to adopt 
technology and geekiness in everything around us. If you don't like this interface, we have a 
friendlier version for you, which you can invoke by entering 'startx' in the shell.</p>
<p> * Documentation: <a href="#" target="_blank">http://www.iiitbh-acm.org/doc/</a></p>
        </div>
        <div id="input">
            <form name='f' onsubmit='return false;' class='cmdline' action=''>
                <table class="inputtable">
                    <tr>
                        <td>
                            <div id='prompt' class='less'></div>
                        </td>
                        <td class="inputtd">
                            <input id='inputfield' name='q' type='text' class='cmdline' autocomplete='off' value="" />
                        </td>
                    </tr>
                </table>
            </form>
        </div>
        <script type="text/javascript">
            //<!--
            var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
            document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
             //-->
        </script>
        <script type="text/javascript">
            //<!--
            var pageTracker = _gat._getTracker("UA-118992-4");
            pageTracker._initData();
            pageTracker._trackPageview();
             //-->
        </script>
    </body>

</html>
